{"version":3,"sources":["../../src/middleware/auth.js"],"names":["req","res","next","token","header","status","send","decoded","jwt","verify","config","get","user","ex","Error"],"mappings":";;;;;;;;;AAAA;;AACA;;eAGe,kBAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,cAAX,CAAd;AACA,MAAI,CAACD,KAAL,EAAY,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kCAArB,CAAP;;AAEZ,MAAI;AACF,QAAMC,OAAO,GAAGC,yBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,mBAAOC,GAAP,CAAW,eAAX,CAAlB,CAAhB;;AACAX,IAAAA,GAAG,CAACY,IAAJ,GAAWL,OAAX;AACAL,IAAAA,IAAI;AACL,GAJD,CAIE,OAAOW,EAAP,EAAW;AACX;AACA,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,C","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from 'config';\r\n\r\n\r\nexport default (req, res, next) => {\r\n  const token = req.header('x-auth-token');\r\n  if (!token) return res.status(401).send('Access denied, No token provided');\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, config.get('jwtPrivateKey'));\r\n    req.user = decoded;\r\n    next();\r\n  } catch (ex) {\r\n    // res.status(400).send('Invalid token');\r\n    throw new Error('Invalid token');\r\n  }\r\n};\r\n"],"file":"auth.js"}
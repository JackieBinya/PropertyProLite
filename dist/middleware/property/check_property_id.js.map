{"version":3,"sources":["../../../src/middleware/property/check_property_id.js"],"names":["req","res","next","property","properties","find","p","id","parseInt","params","status","send","ERROR"],"mappings":";;;;;;;AAAA;;AACA;;eAEe,kBAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,MAAMC,QAAQ,GAAGC,qBAAWC,IAAX,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,EAAF,KAASC,QAAQ,CAACR,GAAG,CAACS,MAAJ,CAAWF,EAAZ,EAAgB,EAAhB,CAArB;AAAA,GAAjB,CAAjB;;AACA,MAAI,CAACJ,QAAL,EAAe,OAAOF,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQ,GAAR,EAAaC,aAAb,EAAoB,4CAApB,CAArB,CAAP;AAEfZ,EAAAA,GAAG,CAACG,QAAJ,GAAeA,QAAf;AAEAD,EAAAA,IAAI;AACP,C","sourcesContent":["import { properties } from '../../helper/property';\r\nimport { results, ERROR } from '../../helper/result';\r\n\r\nexport default (req, res, next) => {\r\n    const property = properties.find(p => p.id === parseInt(req.params.id, 10));\r\n    if (!property) return res.status(404).send(results(404, ERROR, 'Property with the given id does not exists'));\r\n\r\n    req.property = property;\r\n\r\n    next();\r\n}"],"file":"check_property_id.js"}
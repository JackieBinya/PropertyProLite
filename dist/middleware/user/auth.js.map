{"version":3,"sources":["../../../src/middleware/user/auth.js"],"names":["req","res","next","token","header","status","send","ERROR","decoded","jwt","verify","process","env","JWT_PRIVATE_KEY","user","ex","Error"],"mappings":";;;;;;;;;AAAA;;AACA;;eAGe,kBAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,cAAX,CAAd;AACA,MAAI,CAACD,KAAL,EAAY,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQ,GAAR,EAAaC,aAAb,EAAoB,kCAApB,CAArB,CAAP;;AAEZ,MAAI;AACF,QAAMC,OAAO,GAAGC,yBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,OAAO,CAACC,GAAR,CAAYC,eAA9B,CAAhB;;AACAb,IAAAA,GAAG,CAACc,IAAJ,GAAWN,OAAX;AACAN,IAAAA,IAAI;AACL,GAJD,CAIE,OAAOa,EAAP,EAAW;AACX;AACA,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,C","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { results, ERROR } from '../../helper/result';\r\n\r\n\r\nexport default (req, res, next) => {\r\n  const token = req.header('x-auth-token');\r\n  if (!token) return res.status(401).send(results(401, ERROR, 'Access denied, No token provided'));\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_PRIVATE_KEY);\r\n    req.user = decoded;\r\n    next();\r\n  } catch (ex) {\r\n    // res.status(400).send('Invalid token');\r\n    throw new Error('Invalid token');\r\n  }\r\n};\r\n"],"file":"auth.js"}
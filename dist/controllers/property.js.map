{"version":3,"sources":["../../src/controllers/property.js"],"names":["getAllProperties","req","res","keys","Object","query","length","specificProperties","isValid","properties","forEach","property","i","toString","push","status","send","users","find","user","id","owner","email","phoneNumber","ownerEmail","ownerPhoneNumber","getPropertyById","p","parseInt","params","postProperty","files","file","photo","cloudinary","v2","uploader","upload","tempFilePath","err","result","error","ERROR","details","message","_","pick","body","created_on","Date","toLocaleString","SUCCESS","updateProperty","key","includes","propertySold","deleteProperty","index","indexOf","splice"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport { users } from '../models/user';\r\nimport { properties, validate } from '../models/property';\r\nimport { results, SUCCESS, ERROR } from '../helper/result';\r\nimport cloudinary from '../startup/cloudinary';\r\n\r\n\r\nexport const getAllProperties = (req, res) => {\r\n  const keys = Object.keys(req.query);\r\n\r\n  if (keys.length > 0) {\r\n    const specificProperties = [];\r\n    let isValid = false;\r\n\r\n    properties.forEach((property) => {\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if ((property[`${keys[i]}`].toString()) === req.query[`${keys[i]}`]) isValid = true;\r\n        else { isValid = false; break; }\r\n      }\r\n\r\n      if (isValid) specificProperties.push(property);\r\n    });\r\n\r\n    return (specificProperties.length > 0) ? res.status(200).send(results(200, specificProperties)) : res.status(404).send(results(404, 'Properties with the given type cannot be found'));\r\n  }\r\n\r\n  properties.forEach((property) => {\r\n    const { email, phoneNumber } = users.find(user => user.id === property.owner);\r\n    property.ownerEmail = email;\r\n    property.ownerPhoneNumber = phoneNumber;\r\n  });\r\n\r\n  (properties.length > 0) ? res.send(results(200, properties)) : res.status(404).send(results(404, 'No properties available'));\r\n};\r\n\r\nexport const getPropertyById = (req, res) => {\r\n  const property = properties.find(p => p.id === parseInt(req.params.id, 10));\r\n  if (!property) return res.status(404).send(results(404, 'Property with the given id does not exists'));\r\n\r\n  const { email, phoneNumber } = users.find(user => user.id === property.owner);\r\n  property.ownerEmail = email;\r\n  property.ownerPhoneNumber = phoneNumber;\r\n\r\n  return res.send(results(200, property));\r\n};\r\n\r\nexport const postProperty = async (req, res) => {\r\n  if (req.files) {\r\n    const file = req.files.photo;\r\n    cloudinary.v2.uploader.upload(file.tempFilePath, (err, result) => {\r\n      if (err) res.status(500).send(err);\r\n      res.send(result);\r\n    });\r\n  } else {\r\n    const { error } = validate(req);\r\n    if (error) return res.status(400).send(results(ERROR, error.details[0].message));\r\n\r\n    const property = _.pick(req.body, ['price', 'state', 'city', 'address', 'type', 'image_url']);\r\n    property.id = properties.length + 1;\r\n    property.owner = req.user.id;\r\n    property.status = 'available';\r\n    property.created_on = new Date().toLocaleString();\r\n\r\n    properties.push(property);\r\n\r\n    res.send(results(SUCCESS, property));\r\n  }\r\n};\r\n\r\nexport const updateProperty = async (req, res) => {\r\n  const property = properties.find(p => p.id === parseInt(req.params.id, 10));\r\n  if (!property) return res.status(404).send(results(ERROR, 'Property with the given id does not exists'));\r\n\r\n  const keys = Object.keys(property);\r\n  keys.forEach((key) => {\r\n    if (!['id', 'owner', 'status', 'created_on'].includes(key) && req.body[`${key}`]) property[`${key}`] = req.body[`${key}`];\r\n  });\r\n\r\n  res.send(results(SUCCESS, property));\r\n};\r\n\r\nexport const propertySold = async (req, res) => {\r\n  const property = properties.find(p => p.id === parseInt(req.params.id, 10));\r\n  if (!property) return res.status(404).send(results(ERROR, 'Property with the given id does not exists'));\r\n\r\n  property.status = 'sold';\r\n\r\n  res.send(results(SUCCESS, property));\r\n};\r\n\r\nexport const deleteProperty = async (req, res) => {\r\n  let property = properties.find(p => p.id === parseInt(req.params.id, 10));\r\n  if (!property) return res.status(404).send(results(ERROR, 'Property with the given id does not exists'));\r\n\r\n  const index = properties.indexOf(property);\r\n  properties.splice(index, 1);\r\n\r\n  property = {};\r\n  property.message = 'Deleted property successfully';\r\n\r\n  res.send(results(SUCCESS, property));\r\n};\r\n"],"file":"property.js"}
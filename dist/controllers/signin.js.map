{"version":3,"sources":["../../src/controllers/signin.js"],"names":["validate","req","schema","email","Joi","string","required","password","body","signin","res","error","status","send","ERROR","details","message","user","users","find","bcrypt","compare","isValid","token","header","SUCCESS"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAMC,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAEC,gBAAIC,MAAJ,GAAaC,QAAb,GAAwBH,KAAxB,EADM;AAEbI,IAAAA,QAAQ,EAAEH,gBAAIC,MAAJ,GAAaC,QAAb;AAFG,GAAf;AAKA,SAAOF,gBAAIJ,QAAJ,CAAaC,GAAG,CAACO,IAAjB,EAAuBN,MAAvB,CAAP;AACD;;AAED,IAAMO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOR,GAAP,EAAYS,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACKV,QAAQ,CAACC,GAAD,CADb,EACLU,KADK,aACLA,KADK;;AAAA,iBAETA,KAFS;AAAA;AAAA;AAAA;;AAAA,6CAEKD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQC,aAAR,EAAeH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBC,OAAhC,CAArB,CAFL;;AAAA;AAIPC,YAAAA,IAJO,GAIAC,YAAMC,IAAN,CAAW,UAAAF,IAAI;AAAA,qBAAIA,IAAI,CAACd,KAAL,KAAeF,GAAG,CAACO,IAAJ,CAASL,KAA5B;AAAA,aAAf,CAJA;;AAAA,gBAKRc,IALQ;AAAA;AAAA;AAAA;;AAAA,6CAKKP,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQC,aAAR,EAAe,eAAf,CAArB,CALL;;AAAA;AAAA;AAAA,mBAOSM,mBAAOC,OAAP,CAAepB,GAAG,CAACO,IAAJ,CAASD,QAAxB,EAAkCU,IAAI,CAACV,QAAvC,CAPT;;AAAA;AAOPe,YAAAA,OAPO;;AAAA,gBAQRA,OARQ;AAAA;AAAA;AAAA;;AAAA,6CAQQZ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQC,aAAR,EAAe,kBAAf,CAArB,CARR;;AAAA;AAUPS,YAAAA,KAVO,GAUC,6BAAkBN,IAAlB,CAVD;AAWbA,YAAAA,IAAI,CAACM,KAAL,GAAaA,KAAb;AAEAb,YAAAA,GAAG,CAACc,MAAJ,CAAW,cAAX,EAA2BD,KAA3B,EAAkCV,IAAlC,CAAuC,qBAAQY,eAAR,EAAiBR,IAAjB,CAAvC;;AAba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANR,MAAM;AAAA;AAAA;AAAA,GAAZ;;eAgBeA,M","sourcesContent":["import Joi from 'joi';\r\nimport bcrypt from 'bcrypt';\r\nimport { users, generateAuthToken } from '../models/user';\r\nimport { results, SUCCESS, ERROR } from '../helper/result';\r\n\r\n\r\nfunction validate(req) {\r\n  const schema = {\r\n    email: Joi.string().required().email(),\r\n    password: Joi.string().required(),\r\n  };\r\n\r\n  return Joi.validate(req.body, schema);\r\n}\r\n\r\nconst signin = async (req, res) => {\r\n  const { error } = validate(req);\r\n  if (error) return res.status(400).send(results(ERROR, error.details[0].message));\r\n\r\n  const user = users.find(user => user.email === req.body.email);\r\n  if (!user) return res.status(400).send(results(ERROR, 'Invalid email'));\r\n\r\n  const isValid = await bcrypt.compare(req.body.password, user.password);\r\n  if (!isValid) return res.status(400).send(results(ERROR, 'Invalid password'));\r\n\r\n  const token = generateAuthToken(user);\r\n  user.token = token;\r\n\r\n  res.header('x-auth-token', token).send(results(SUCCESS, user));\r\n};\r\n\r\nexport default signin;\r\n"],"file":"signin.js"}
{"version":3,"sources":["../../src/controllers/signup.js"],"names":["signup","req","res","error","status","send","ERROR","details","message","user","users","find","email","body","_","pick","id","length","token","bcrypt","genSalt","salt","hash","password","push","header","SUCCESS"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACK,oBAASD,GAAT,CADL,EACLE,KADK,aACLA,KADK;;AAAA,iBAETA,KAFS;AAAA;AAAA;AAAA;;AAAA,6CAEKD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQC,aAAR,EAAeH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBC,OAAhC,CAArB,CAFL;;AAAA;AAITC,YAAAA,IAJS,GAIFC,YAAMC,IAAN,CAAW,UAAAF,IAAI;AAAA,qBAAIA,IAAI,CAACG,KAAL,KAAeX,GAAG,CAACY,IAAJ,CAASD,KAA5B;AAAA,aAAf,CAJE;;AAAA,iBAKTH,IALS;AAAA;AAAA;AAAA;;AAAA,6CAKIP,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAAQC,aAAR,EAAe,0BAAf,CAArB,CALJ;;AAAA;AAObG,YAAAA,IAAI,GAAGK,mBAAEC,IAAF,CAAOd,GAAG,CAACY,IAAX,EAAiB,CAAC,YAAD,EAAe,WAAf,EAA4B,OAA5B,EAAqC,UAArC,EAAiD,aAAjD,EAAgE,SAAhE,EAA2E,SAA3E,CAAjB,CAAP;AACAJ,YAAAA,IAAI,CAACO,EAAL,GAAUN,YAAMO,MAAN,GAAe,CAAzB;AAEMC,YAAAA,KAVO,GAUC,6BAAkBT,IAAlB,CAVD;AAWbA,YAAAA,IAAI,CAACS,KAAL,GAAaA,KAAb;AAXa;AAAA,mBAaMC,mBAAOC,OAAP,CAAe,EAAf,CAbN;;AAAA;AAaPC,YAAAA,IAbO;AAAA;AAAA,mBAcSF,mBAAOG,IAAP,CAAYb,IAAI,CAACc,QAAjB,EAA2BF,IAA3B,CAdT;;AAAA;AAcbZ,YAAAA,IAAI,CAACc,QAdQ;;AAgBbb,wBAAMc,IAAN,CAAWf,IAAX;;AAEAP,YAAAA,GAAG,CAACuB,MAAJ,CAAW,cAAX,EAA2BP,KAA3B,EAAkCb,IAAlC,CAAuC,qBAAQqB,eAAR,EAAiBjB,IAAjB,CAAvC;;AAlBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANT,MAAM;AAAA;AAAA;AAAA,GAAZ;;eAqBeA,M","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport _ from 'lodash';\r\nimport { users, validate, generateAuthToken } from '../models/user';\r\nimport { results, SUCCESS, ERROR } from '../helper/result';\r\n\r\nconst signup = async (req, res) => {\r\n  const { error } = validate(req);\r\n  if (error) return res.status(400).send(results(ERROR, error.details[0].message));\r\n\r\n  let user = users.find(user => user.email === req.body.email);\r\n  if (user) return res.status(400).send(results(ERROR, 'user already registered.'));\r\n\r\n  user = _.pick(req.body, ['first_name', 'last_name', 'email', 'password', 'phoneNumber', 'address', 'isAdmin']);\r\n  user.id = users.length + 1;\r\n\r\n  const token = generateAuthToken(user);\r\n  user.token = token;\r\n\r\n  const salt = await bcrypt.genSalt(10);\r\n  user.password = await bcrypt.hash(user.password, salt);\r\n\r\n  users.push(user);\r\n\r\n  res.header('x-auth-token', token).send(results(SUCCESS, user));\r\n};\r\n\r\nexport default signup;\r\n"],"file":"signup.js"}
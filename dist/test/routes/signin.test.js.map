{"version":3,"sources":["../../../src/test/routes/signin.test.js"],"names":["chai","use","chaiHttp","expect","request","describe","user","exec","server","post","send","beforeEach","email","password","users","length","it","res","status","to","equal","push","id","isAdmin","bcrypt","genSalt","salt","hash","decoded","jwt","verify","body","data","token","process","env","JWT_PRIVATE_KEY","have","property"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport { users } from '../../helper/user';\r\nimport server from '../../index';\r\n\r\nchai.use(chaiHttp);\r\nconst { expect, request } = chai;\r\n\r\ndescribe('auth/signin', () => {\r\n  describe('POST /', () => {\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .post('/api/v1/auth/signin')\r\n      .send(user);\r\n\r\n    beforeEach(() => {\r\n      user = { email: 'email@gmail.com', password: '123456' };\r\n\r\n      users.length = 0;\r\n    });\r\n\r\n    it('should return 400 if input is invalid', async () => {\r\n      user = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 400 if email is invalid', async () => {\r\n      const user = { email: 'a@gmail.com' };\r\n      users.push(user);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 400 if password is invalid', async () => {\r\n      users.push(user);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 200 if user is logged in successfully', async () => {\r\n      const user = { email: 'email@gmail.com', password: '123456', id: 1, isAdmin: true };\r\n      const salt = await bcrypt.genSalt(10);\r\n      user.password = await bcrypt.hash(user.password, salt);\r\n      users.push(user);\r\n\r\n      const res = await exec();\r\n\r\n      const decoded = jwt.verify(res.body.data.token, process.env.JWT_PRIVATE_KEY);\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(decoded).to.have.property('isAdmin');\r\n    });\r\n  });\r\n});\r\n"],"file":"signin.test.js"}
{"version":3,"sources":["../../../src/test/routes/signup.test.js"],"names":["chai","use","chaiHttp","expect","request","describe","user","exec","server","post","send","beforeEach","email","first_name","last_name","password","phoneNumber","address","isAdmin","users","length","it","res","status","to","equal","push","decoded","jwt","verify","body","data","token","process","env","JWT_PRIVATE_KEY","have","property"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEAA,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAoBH,gB,CAApBG,M;IAAQC,O,GAAYJ,gB,CAAZI,O;AAGhBC,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC5BA,EAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvB,QAAIC,IAAJ;;AAEA,QAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,aAAMH,OAAO,CAACI,iBAAD,CAAP,CAChBC,IADgB,CACX,qBADW,EAEhBC,IAFgB,CAEXJ,IAFW,CAAN;AAAA,KAAb;;AAIAK,IAAAA,UAAU,CAAC,YAAM;AACfL,MAAAA,IAAI,GAAG;AACLM,QAAAA,KAAK,EAAE,iBADF;AAELC,QAAAA,UAAU,EAAE,GAFP;AAGLC,QAAAA,SAAS,EAAE,GAHN;AAILC,QAAAA,QAAQ,EAAE,QAJL;AAKLC,QAAAA,WAAW,EAAE,YALR;AAMLC,QAAAA,OAAO,EAAE,GANJ;AAOLC,QAAAA,OAAO,EAAE;AAPJ,OAAP;AAUAC,kBAAMC,MAAN,GAAe,CAAf;AACD,KAZS,CAAV;AAcAC,IAAAA,EAAE,CAAC,uCAAD;AAAA;AAAA;AAAA;AAAA,iCAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1Cf,cAAAA,IAAI,CAACS,QAAL,GAAgB,GAAhB;AAD0C;AAAA,qBAGxBR,IAAI,EAHoB;;AAAA;AAGpCe,cAAAA,GAHoC;AAK1CnB,cAAAA,MAAM,CAACmB,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;;AAL0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1C,GAAF;AAQAJ,IAAAA,EAAE,CAAC,iDAAD;AAAA;AAAA;AAAA;AAAA,iCAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AACpDF,0BAAMO,IAAN,CAAWpB,IAAX;;AADoD;AAAA,qBAGlCC,IAAI,EAH8B;;AAAA;AAG9Ce,cAAAA,GAH8C;AAKpDnB,cAAAA,MAAM,CAACmB,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;;AALoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApD,GAAF;AAQAJ,IAAAA,EAAE,CAAC,sDAAD;AAAA;AAAA;AAAA;AAAA,iCAAyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACvCd,IAAI,EADmC;;AAAA;AACnDe,cAAAA,GADmD;AAGnDK,cAAAA,OAHmD,GAGzCC,yBAAIC,MAAJ,CAAWP,GAAG,CAACQ,IAAJ,CAASC,IAAT,CAAcC,KAAzB,EAAgCC,OAAO,CAACC,GAAR,CAAYC,eAA5C,CAHyC;AAKzDhC,cAAAA,MAAM,CAACmB,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAtB,cAAAA,MAAM,CAACwB,OAAD,CAAN,CAAgBH,EAAhB,CAAmBY,IAAnB,CAAwBC,QAAxB,CAAiC,SAAjC;;AANyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzD,GAAF;AAQD,GA7CO,CAAR;AA8CD,CA/CO,CAAR","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport jwt from 'jsonwebtoken';\r\nimport { users } from '../../helper/user';\r\nimport server from '../../index';\r\n\r\nchai.use(chaiHttp);\r\nconst { expect, request } = chai;\r\n\r\n\r\ndescribe('auth/signup', () => {\r\n  describe('POST /', () => {\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .post('/api/v1/auth/signup')\r\n      .send(user);\r\n\r\n    beforeEach(() => {\r\n      user = {\r\n        email: 'email@gmail.com',\r\n        first_name: 'a',\r\n        last_name: 'a',\r\n        password: '123456',\r\n        phoneNumber: '1234567890',\r\n        address: 'a',\r\n        isAdmin: true,\r\n      };\r\n\r\n      users.length = 0;\r\n    });\r\n\r\n    it('should return 400 if input is invalid', async () => {\r\n      user.password = '1';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 400 if user is already registered', async () => {\r\n      users.push(user);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 200 if user is registered successfully', async () => {\r\n      const res = await exec();\r\n\r\n      const decoded = jwt.verify(res.body.data.token, process.env.JWT_PRIVATE_KEY);\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(decoded).to.have.property('isAdmin');\r\n    });\r\n  });\r\n});\r\n"],"file":"signup.test.js"}
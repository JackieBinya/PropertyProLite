{"version":3,"sources":["../../../src/test/routes/property.test.js"],"names":["chai","use","chaiHttp","expect","request","describe","user","property","stringQuery","token","exec","server","get","set","beforeEach","users","length","properties","id","email","phoneNumber","isAdmin","owner","type","state","status","push","it","res","to","equal","body","data","deep","post","send","price","city","address","image_url","have","patch","lessThan"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { users, generateAuthToken } from '../../helper/user';\r\nimport { properties } from '../../helper/property';\r\nimport server from '../../index';\r\n\r\nchai.use(chaiHttp);\r\nconst { expect, request } = chai;\r\n\r\ndescribe('api/property', () => {\r\n  describe('GET /', () => {\r\n    let user;\r\n    let property;\r\n    let stringQuery;\r\n    let token;\r\n\r\n    const exec = () => request(server)\r\n      .get(`/api/v1/property${stringQuery}`)\r\n      .set('x-auth-token', token);\r\n\r\n    beforeEach(() => {\r\n      users.length = 0;\r\n      properties.length = 0;\r\n\r\n      user = { id: 1, email: 'a', phoneNumber: '1', isAdmin: true };\r\n      property = { id: 1, owner: 1, type: 'type', state: 'state', status: 'sold' };\r\n\r\n      token = generateAuthToken(user);\r\n\r\n      users.push(user);\r\n      properties.push(property);\r\n    });\r\n\r\n    it('should return 200 with a property of a given type it it exists', async () => {\r\n      stringQuery = '?type=type&&state=state';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data[0]).to.deep.equal(property);\r\n    });\r\n\r\n    it('should return 404 if property of a given type does not exists', async () => {\r\n      stringQuery = '?type=new';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return all properties ', async () => {\r\n      stringQuery = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data[0].id).to.equal(properties[0].id);\r\n    });\r\n\r\n    it('should return all available properties ', async () => {\r\n      stringQuery = '';\r\n      property.status = 'available';\r\n      \r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data[0].id).to.equal(properties[0].id);\r\n    });\r\n\r\n    it('should return 404 if no properties founded ', async () => {\r\n      stringQuery = '';\r\n      properties.length = 0;\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n  });\r\n\r\n  describe('GET/:ID /', () => {\r\n    let user;\r\n    let property;\r\n\r\n    const exec = () => request(server)\r\n      .get('/api/v1/property/1');\r\n\r\n    beforeEach(() => {\r\n      users.length = 0;\r\n      properties.length = 0;\r\n\r\n      user = { id: 1, email: 'a', phoneNumber: '1' };\r\n      property = { id: 1, owner: 1 };\r\n\r\n      users.push(user);\r\n      properties.push(property);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      properties.length = 0;\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return property with given id', async () => {\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data.id).to.equal(property.id);\r\n    });\r\n  });\r\n\r\n  describe('POST /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .post('/api/v1/property')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1000,\r\n        state: 'New york',\r\n        city: 'Queens',\r\n        address: 'Street 397 PK',\r\n        type: '6 bedrooms',\r\n        image_url: 'https://postcron.com/en/blog/10-amazing-marketing-lessons-steve-jobs-taught-us/',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if no token is provided', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 400 if token is invalid', async () => {\r\n      token = 'a';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(500);\r\n    });\r\n\r\n    it('should return 400 if input is invalid', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 400 if property already exits', async() => {\r\n      const property = { type: '6 bedrooms' };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return a property if it is saved successfully', async () => {\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data).to.have.property('id');\r\n    });\r\n  });\r\n\r\n  describe('PATCH/:ID /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .patch('/api/v1/property/1')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1000,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'https://postcron.com/en/blog/10-amazing-marketing-lessons-steve-jobs-taught-us/',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 400 if property data is not valid', async () => {\r\n      property.state = 1;\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = { image_url: 'https://postcron.com/en/blog/10-amazing-marketing-lessons-steve-jobs-taught-us/'};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return updated property if input is valid', async () => {\r\n      const property = { id: 1, state: 'state' };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n      \r\n      expect(res.status).to.equal(200);\r\n      expect(property.state).to.equal('new state');\r\n    });\r\n  });\r\n\r\n  describe('PATCH/:id/sold /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .patch('/api/v1/property/1/sold')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'image_url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return property with sold status', async () => {\r\n      const property = { id: 1, status: 'available' };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(property.status).to.equal('sold');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .delete('/api/v1/property/1')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'image_url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 403 if user is not an admin', async () => {\r\n      user.isAdmin = false;\r\n      token = generateAuthToken(user);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(403);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return deleted property', async () => {\r\n      const property = { id: 1 };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(properties).to.have.length.lessThan(1);\r\n    });\r\n  });\r\n});\r\n"],"file":"property.test.js"}
{"version":3,"sources":["../../../src/test/routes/property.test.js"],"names":["chai","use","chaiHttp","expect","request","describe","user","property","stringQuery","exec","server","get","beforeEach","users","length","properties","id","email","phoneNumber","owner","type","state","push","it","res","status","to","equal","body","data","deep","token","post","set","send","price","city","address","image_url","isAdmin","have","patch","lessThan"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { users, generateAuthToken } from '../../models/user';\r\nimport { properties } from '../../models/property';\r\nimport server from '../../index';\r\n\r\nchai.use(chaiHttp);\r\nconst { expect, request } = chai;\r\n\r\ndescribe('api/property', () => {\r\n  describe('GET /', () => {\r\n    let user;\r\n    let property;\r\n    let stringQuery;\r\n\r\n    const exec = () => request(server)\r\n      .get(`/api/v1/property${stringQuery}`);\r\n\r\n    beforeEach(() => {\r\n      users.length = 0;\r\n      properties.length = 0;\r\n\r\n      user = { id: 1, email: 'a', phoneNumber: '1' };\r\n      property = { id: 1, owner: 1, type: 'type', state: 'state'};\r\n\r\n      users.push(user);\r\n      properties.push(property);\r\n    });\r\n\r\n    it('should return 200 with a property of a given type it it exists', async () => {\r\n      stringQuery = '?type=type&&state=state';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data[0]).to.deep.equal(property);\r\n    });\r\n\r\n    it('should return 404 if property of a given type does not exists', async () => {\r\n      stringQuery = '?type=new';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return all properties ', async () => {\r\n      stringQuery = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data[0].id).to.equal(properties[0].id);\r\n    });\r\n\r\n    it('should return 404 if no properties founded ', async () => {\r\n      stringQuery = '';\r\n      properties.length = 0;\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n  });\r\n\r\n  describe('GET/:ID /', () => {\r\n    let user;\r\n    let property;\r\n\r\n    const exec = () => request(server)\r\n      .get('/api/v1/property/1');\r\n\r\n    beforeEach(() => {\r\n      users.length = 0;\r\n      properties.length = 0;\r\n\r\n      user = { id: 1, email: 'a', phoneNumber: '1' };\r\n      property = { id: 1, owner: 1 };\r\n\r\n      users.push(user);\r\n      properties.push(property);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      properties.length = 0;\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return property with given id', async () => {\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data.id).to.equal(property.id);\r\n    });\r\n  });\r\n\r\n  describe('POST /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .post('/api/v1/property')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 100,\r\n        state: 'New york',\r\n        city: 'Queens',\r\n        address: 'Street 397 PK',\r\n        type: '6 bedrooms',\r\n        image_url: 'some url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if no token is provided', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 400 if token is invalid', async () => {\r\n      token = 'a';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(500);\r\n    });\r\n\r\n    it('should return 400 if input is invalid', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(400);\r\n    });\r\n\r\n    it('should return a property if it is saved successfully', async () => {\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(res.body.data).to.have.property('id');\r\n    });\r\n  });\r\n\r\n  describe('PATCH/:ID /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .patch('/api/v1/property/1')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'image_url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return updated property if input is valid', async () => {\r\n      const property = { id: 1, state: 'state' };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(property.state).to.equal('new state');\r\n    });\r\n  });\r\n\r\n  describe('PATCH/:id/sold /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .patch('/api/v1/property/1/sold')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'image_url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return property with sold status', async () => {\r\n      const property = { id: 1, status: 'available' };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(property.status).to.equal('sold');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /', () => {\r\n    let token;\r\n    let property;\r\n    let user;\r\n\r\n    const exec = () => request(server)\r\n      .delete('/api/v1/property/1')\r\n      .set('x-auth-token', token)\r\n      .send(property);\r\n\r\n    beforeEach(() => {\r\n      property = {\r\n        price: 1,\r\n        state: 'new state',\r\n        city: 'city',\r\n        address: 'address',\r\n        type: 'type',\r\n        image_url: 'image_url',\r\n      };\r\n\r\n      user = { id: 1, isAdmin: true };\r\n      token = generateAuthToken(user);\r\n\r\n      properties.length = 0;\r\n    });\r\n\r\n    it('should return 401 if user is not logged in', async () => {\r\n      token = '';\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(401);\r\n    });\r\n\r\n    it('should return 403 if user is not an admin', async () => {\r\n      user.isAdmin = false;\r\n      token = generateAuthToken(user);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(403);\r\n    });\r\n\r\n    it('should return 404 if property with given id is not found', async () => {\r\n      property = {};\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(404);\r\n    });\r\n\r\n    it('should return deleted property', async () => {\r\n      const property = { id: 1 };\r\n      properties.push(property);\r\n\r\n      const res = await exec();\r\n\r\n      expect(res.status).to.equal(200);\r\n      expect(properties).to.have.length.lessThan(1);\r\n    });\r\n  });\r\n});\r\n"],"file":"property.test.js"}
{"version":3,"sources":["../../src/helper/search.js"],"names":["searchPropertiesByType","keys","req","specificProperties","isValid","properties","forEach","property","i","length","toString","query","push","searchProperties","user","users","find","id","owner","email","phoneNumber","ownerEmail","ownerPhoneNumber","freshProperties","status","searchPropertyById"],"mappings":";;;;;;;AAAA;;AACA;;AAGO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,IAAD,EAAOC,GAAP,EAAe;AACjD,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAIC,OAAO,GAAG,KAAd;;AAEAC,uBAAWC,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAKD,QAAQ,WAAIN,IAAI,CAACO,CAAD,CAAR,EAAR,CAAuBE,QAAvB,EAAD,KAAwCR,GAAG,CAACS,KAAJ,WAAaV,IAAI,CAACO,CAAD,CAAjB,EAA5C,EAAqEJ,OAAO,GAAG,IAAV,CAArE,KACK;AAAEA,QAAAA,OAAO,GAAG,KAAV;AAAiB;AAAQ;AACnC;;AAED,QAAIA,OAAJ,EAAaD,kBAAkB,CAACS,IAAnB,CAAwBL,QAAxB;AAChB,GAPD;;AASA,SAAOJ,kBAAP;AACH,CAdM;;;;AAgBA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AAEtC,MAAIA,IAAJ,EAAU;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,YACGP,QADH;;AAAA,0BAE6BQ,YAAMC,IAAN,CAAW,UAAAF,IAAI;AAAA,iBAAIA,IAAI,CAACG,EAAL,KAAYV,QAAQ,CAACW,KAAzB;AAAA,SAAf,CAF7B;AAAA,YAEMC,KAFN,eAEMA,KAFN;AAAA,YAEaC,WAFb,eAEaA,WAFb;;AAGFb,QAAAA,QAAQ,CAACc,UAAT,GAAsBF,KAAtB;AACAZ,QAAAA,QAAQ,CAACe,gBAAT,GAA4BF,WAA5B;AAJE;;AACN,2BAAqBf,oBAArB,8HAAiC;AAAA;AAIhC;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAON,WAAOA,oBAAP;AACH,GARD,MASK;AACD,QAAMkB,eAAe,GAAG,EAAxB;AACAA,IAAAA,eAAe,CAACd,MAAhB,GAAyB,CAAzB;AAFC;AAAA;AAAA;;AAAA;AAID,4BAAqBJ,oBAArB,mIAAiC;AAAA,YAAxBE,QAAwB;AAC7B,YAAGA,QAAQ,CAACiB,MAAT,IAAmB,WAAtB,EACID,eAAe,CAACX,IAAhB,CAAqBL,QAArB;AACP;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASD,WAAOgB,eAAP;AACH;AACJ,CAtBM;;;;AAwBA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAAClB,QAAD,EAAc;AAAA,qBACbQ,YAAMC,IAAN,CAAW,UAAAF,IAAI;AAAA,WAAIA,IAAI,CAACG,EAAL,KAAYV,QAAQ,CAACW,KAAzB;AAAA,GAAf,CADa;AAAA,MACpCC,KADoC,gBACpCA,KADoC;AAAA,MAC7BC,WAD6B,gBAC7BA,WAD6B;;AAE5Cb,EAAAA,QAAQ,CAACc,UAAT,GAAsBF,KAAtB;AACAZ,EAAAA,QAAQ,CAACe,gBAAT,GAA4BF,WAA5B;AAEA,SAAOb,QAAP;AACH,CANM","sourcesContent":["import { properties } from './property';\r\nimport { users } from './user';\r\n\r\n\r\nexport const searchPropertiesByType = (keys, req) => {\r\n    const specificProperties = [];\r\n    let isValid = false;\r\n\r\n    properties.forEach((property) => {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if ((property[`${keys[i]}`].toString()) === req.query[`${keys[i]}`]) isValid = true;\r\n            else { isValid = false; break; }\r\n        }\r\n\r\n        if (isValid) specificProperties.push(property);\r\n    });\r\n\r\n    return specificProperties;\r\n}\r\n\r\nexport const searchProperties = (user) => {\r\n\r\n    if (user) {\r\n        for (let property of properties) {\r\n            const { email, phoneNumber } = users.find(user => user.id === property.owner);\r\n            property.ownerEmail = email;\r\n            property.ownerPhoneNumber = phoneNumber;\r\n        }\r\n\r\n        return properties;\r\n    }\r\n    else {\r\n        const freshProperties = [];\r\n        freshProperties.length = 0;\r\n\r\n        for (let property of properties) {\r\n            if(property.status == 'available') \r\n                freshProperties.push(property);\r\n        }\r\n\r\n        return freshProperties;\r\n    }\r\n}\r\n\r\nexport const searchPropertyById = (property) => {\r\n    const { email, phoneNumber } = users.find(user => user.id === property.owner);\r\n    property.ownerEmail = email;\r\n    property.ownerPhoneNumber = phoneNumber;\r\n\r\n    return property;\r\n}"],"file":"search.js"}
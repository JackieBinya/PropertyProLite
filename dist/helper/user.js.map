{"version":3,"sources":["../../src/helper/user.js"],"names":["users","validateSignup","req","schema","email","Joi","string","required","first_name","min","max","last_name","password","phoneNumber","number","address","isAdmin","validate","body","strictValidate","regex","keys","Object","key","includes","test","error","isNaN","validateLogin","generateAuthToken","user","jwt","sign","id","process","env","JWT_PRIVATE_KEY","hashPassword","bcrypt","genSalt","salt","hash","save","_","pick","length","token","push"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport _ from 'lodash';\r\n\r\nconst users = [];\r\n\r\n\r\nexport const validateSignup = (req) => {\r\n  const schema = {\r\n    email: Joi.string().required().email(),\r\n    first_name: Joi.string().required().min(1).max(255),\r\n    last_name: Joi.string().required().min(1).max(255),\r\n    password: Joi.string().required().min(6).max(255),\r\n    phoneNumber: Joi.number().required().min(10),\r\n    address: Joi.string().required().min(1).max(255),\r\n    isAdmin: Joi.boolean(),\r\n  };\r\n\r\n  return Joi.validate(req.body, schema);\r\n}\r\n\r\nexport const strictValidate = (req) => {\r\n  const regex = /^[A-Za-z0-9 ]+$/;\r\n\r\n  let keys = Object.keys(req.body);\r\n\r\n  for (let key of keys) {\r\n    if (!['email', 'password', 'phoneNumber', 'isAdmin'].includes(key)) {\r\n      if (!regex.test(req.body[`${key}`])) return { error: `${key} should not have special characters` }\r\n      if (!isNaN(req.body[`${key}`])) return { error: `${key} should not be a number` };\r\n    }\r\n  }\r\n}\r\n\r\nexport const validateLogin = (req) => {\r\n  const schema = {\r\n    email: Joi.string().required().email(),\r\n    password: Joi.string().required(),\r\n  };\r\n\r\n  return Joi.validate(req.body, schema);\r\n}\r\n\r\nexport const generateAuthToken = (user) => {\r\n  return jwt.sign({\r\n      id: user.id,\r\n      first_name: user.first_name,\r\n      last_name: user.last_name,\r\n      email: user.email,\r\n      isAdmin: user.isAdmin,\r\n    }, process.env.JWT_PRIVATE_KEY);\r\n}\r\n\r\nexport const hashPassword = async (user) => {\r\n  const salt = await bcrypt.genSalt(10);\r\n  return await bcrypt.hash(user.password, salt);\r\n}\r\n\r\nexport const save = async (req) => {\r\n  let user = _.pick(req.body, ['first_name', 'last_name', 'email', 'password', 'phoneNumber', 'address', 'isAdmin']);\r\n  user.id = users.length + 1;\r\n\r\n  const token = generateAuthToken(user);\r\n  user.token = token;\r\n\r\n  user.password = await hashPassword(user);\r\n\r\n  users.push(user);\r\n\r\n  return _.pick(user, ['token']);\r\n}\r\n\r\nexport { users };\r\n"],"file":"user.js"}